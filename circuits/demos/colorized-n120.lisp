;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: SURF; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                                                                                  ;;; 
;;;                   The Surf-Hippo Neuron Simulator                                ;;; 
;;;                                                                                  ;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                                                                                  ;;; 
;;; This code was written as part of the Surf-Hippo Project at Center for Biological ;;; 
;;; Information Processing, Department of Brain and Cognitive Sciences,              ;;; 
;;; Massachusetts Institute of Technology, and currently at the Unite de             ;;; 
;;; Neurosciences Integratives et Computationnelles, Institut Federatif de           ;;; 
;;; Neurobiologie Alfred Fessard, CNRS.                                              ;;; 
;;;                                                                                  ;;; 
;;; Permission to use, copy, modify, and distribute this software and its            ;;; 
;;; documentation for any purpose and without fee is hereby granted, provided that   ;;; 
;;; this software is cited in derived published work, and the copyright notice       ;;; 
;;; appears in all copies and in supporting documentation. The Surf-Hippo Project    ;;; 
;;; makes no representations about the suitability of this software for any          ;;; 
;;; purpose. It is provided "as is" without express or implied warranty.             ;;; 
;;;                                                                                  ;;; 
;;; If you are using this code or any part of Surf-Hippo, please contact             ;;; 
;;; surf-hippo@ai.mit.edu to be put on the mailing list.                             ;;; 
;;;                                                                                  ;;; 
;;; Copyright (c) 1989 - 2002, Lyle J. Graham                                        ;;;                                                       
;;;                                                                                  ;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Colorization Demonstration
;; L. Graham 01.01.2000

;; Cell model n120 is full ~3000 compartment reconstruction of a hippocampal pyramidal cell (see Borg-Graham, 1998), supplied by
;; Dennis Turner (Southampton University). Somatic channels are taken from the Working Model. Input includes a current pulse at
;; the soma, and random activity of an excitatory synapse in the dendritic tree. This simulation automatically presents a
;; colorized animation of the cell.

(cell-type-def
 '(HPC
   (rm . 40000)				; ohms-cm2
   (ri  . 200)				; ohm-cm2
   (cm . 0.7)				; uF/cm2
   (v-leak . -65)			; mV
   ))

;; Load detailed hippocampal pyramidal cell anatomy.
(let ((*use-simple-names* t) 		; Use simple (numbered) soma and segment names.
      (*DEFAULT-CELL-TYPE-NAME* 'HPC))
  (circuit-load "anatomy/turner/ca1/n120.fix"))

;; Setup cell channels and current source.
(add-working-hpc-channels *soma* t)
(turn-off 'KAHP-HPC-ABSOLUTE)		; Block the Ca++ dep slow K current
(pulse-list (add-isource *soma*) '(5 100 0.5))

;; Add a synapse to segment 711 and add a few synaptic events to the synapse.
(events (create-element 711 'FAST-EX-ABS)
	;; These were generated by calling (POISSON-EVENTS 1 3 20) -> a poisson process with rate lambda of 1/ms, from 3 to 20 milliseconds
	'(3.6254377 4.2996325 5.8688464 5.9309845 6.3608437 6.4220166 6.686985 7.152315
	  7.2406297 7.442387 7.975373 9.300047 15.894774 17.591448 17.971172 18.254477))

;; Setup element plotting with ENABLE-ELEMENT-PLOT.
;; In this first call,the function flags the default data type for each element, thus voltages for the soma and post-synaptic segment,
;; and currents for the current source and the synapse.
(enable-element-plot (list *soma* *isource* *synapse* 711))
;; In this second call for the synapse, explicitly indicate plotting of synapse events.
(enable-element-plot *synapse* 'event)

;; Setup histology.
(element-parameter 'FAST-EX-ABS 'color 'purple)
(just-draw :scale 2 :mark-elements 'synapses)

;; Setup up simulation duration, colorization and sparse data parameters.
(setq *user-stop-time* 20		; Total simulation time (ms).
      *enable-colorize-time* t		; Enable time display in colorized histology windows.
      *enable-colorize-scale* t		; Enable color scale display in colorized histology windows.
      *colorize-simulation* t		; Enable colorization of simulation in some or all histology windows.
      *enable-sparse-data* t		; Enable data storage from all the circuit elements.
      *sparse-data-step* 0.5		; Time step (ms) target for sparse data storage. Simulation times for sparse data are collected in *SPARSE-DATA-TIMES*.
      )

;; After running the simulation (RUN), show the middle of the first spike at 6.5 milliseconeds in the colorized histology
;; window with (SHOW-SPARSE-DATA :TARGET-TIME 6.5).			

