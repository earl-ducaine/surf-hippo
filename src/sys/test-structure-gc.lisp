

(defstruct foo)

(defvar *foos* nil)

(defun test-foo-gc ()
  (ext::gc)
  (vm::instance-usage :dynamic)
  (dotimes (x 1.0e4) (make-foo))
  (vm::instance-usage :dynamic)
  (ext::gc)
  (vm::instance-usage :dynamic))

(defun test-foo-gc-2 (&optional full (gen 0))
  (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2))

(defun foos-message () (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*)))

(defun test-foo-gc-3 (&optional full (gen 0))
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (foos-message)
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (foos-message)
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic)
  (setq *foos* nil)
  (foos-message)
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic))

(defun test-foo-gc-4 (&optional full (gen 0))
  (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic :top-n 2)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic)
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (system::scrub-control-stack) (ext::gc :full full :gen gen)
  (vm::instance-usage :dynamic))

(defun scrub-and-gc (&optional full (gen 0))
 ; (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (system::scrub-control-stack) (ext::gc :full full :gen gen))

(defun test-foo-gc-5 (&optional full (gen 0))
  (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc full gen)
  (vm::instance-usage :dynamic :top-n 2)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc full gen)
  (vm::instance-usage :dynamic :top-n 2)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc full gen)
  (vm::instance-usage :dynamic)
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc full gen)
  (vm::instance-usage :dynamic))

(defun foos-message ()
  (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*)))


(defun scrub-and-gc (&optional (full t) (gen 0))
  (system::scrub-control-stack) (ext::gc :full full :gen gen))

(defun scrub-and-gc ()
  (system::scrub-control-stack)
  (ext::gc :full t)
  (vm::instance-usage :dynamic :top-n 2))

(defun test-foo-gc-5 ()
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (scrub-and-gc)
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc))

(defun test-foo-gc-6 ()
  (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (scrub-and-gc)
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc))

(defun test-foo-gc-7 ()
  (declare (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (scrub-and-gc)
  (setq *foos* nil)
  (scrub-and-gc))

(defun test-foo-gc-8 (&optional (print-foos t))
  (declare (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (scrub-and-gc)
  (setq *foos* nil)
  (when print-foos (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*)))
  (scrub-and-gc))

;;;;;;;;;;;;;;;;;


(defun test-foo-gc-8 ()
  (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc))

(defun test-foo-gc-9 ()
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (setq *foos* nil)
  (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*))
  (scrub-and-gc))

(defun test-foo-gc-10 ()
  (DECLARE (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (setq *foos* nil)
  (scrub-and-gc))

(defun test-foo-gc-11 (&optional (print-foos t))
  (declare (optimize (safety 0) (speed 3) (space 1)))
  (scrub-and-gc)
  (setq *foos* (loop for x from 1 to 1.0e4 collect (make-foo)))
  (scrub-and-gc)
  (setq *foos* nil)
  (when print-foos (format t "~%*** The length of *FOOS* is now ~A. ***~%~%" (length *foos*)))
  (scrub-and-gc))

  

